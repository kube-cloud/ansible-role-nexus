---

# Generate Configurations from templates
- name: "({{ ansible_distribution }}) NX::CONFIG - Generate Configurations from templates"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default(nexus_owner) }}"
    group: "{{ item.group | default(nexus_group) }}"
    mode: "{{ item.mode | default(_nexus_file_mode) }}"
    backup: true
  loop:
    - { src: "bin/nexus.vmoptions.j2", dest: "{{ _nexus_installdir }}/bin/nexus.vmoptions" }
    - { src: "bin/nexus.j2", dest: "{{ _nexus_installdir }}/bin/nexus" }
    - { src: "bin/nexus.rc.j2", dest: "{{ _nexus_installdir }}/bin/nexus.rc" }
    - { src: "etc/nexus.properties.j2", dest: "{{ _nexus_datadir }}/etc/nexus.properties" }
    - { src: "etc/logback/logback-access.xml.j2", dest: "{{ _nexus_installdir }}/etc/logback/logback-access.xml" }
    - { src: "etc/logback/logback.xml.j2", dest: "{{ _nexus_installdir }}/etc/logback/logback.xml" }
    - { src: "etc/karaf/config.properties.j2", dest: "{{ _nexus_installdir }}/etc/karaf/config.properties" }
    - { src: "etc/karaf/custom.properties.j2", dest: "{{ _nexus_installdir }}/etc/karaf/custom.properties" }
    - { src: "etc/karaf/java.util.logging.properties.j2", dest: "{{ _nexus_installdir }}/etc/karaf/java.util.logging.properties" }
    - { src: "etc/karaf/jmx.acl.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/jmx.acl.cfg" }
    - { src: "etc/karaf/jre.properties.j2", dest: "{{ _nexus_installdir }}/etc/karaf/jre.properties" }
    - { src: "etc/karaf/org.apache.felix.fileinstall-deploy.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.apache.felix.fileinstall-deploy.cfg" }
    - { src: "etc/karaf/org.apache.karaf.features.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.apache.karaf.features.cfg" }
    - { src: "etc/karaf/org.apache.karaf.features.xml.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.apache.karaf.features.xml" }
    - { src: "etc/karaf/org.apache.karaf.jaas.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.apache.karaf.jaas.cfg" }
    - { src: "etc/karaf/org.apache.karaf.kar.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.apache.karaf.kar.cfg" }
    - { src: "etc/karaf/org.apache.karaf.log.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.apache.karaf.log.cfg" }
    - { src: "etc/karaf/org.apache.karaf.management.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.apache.karaf.management.cfg" }
    - { src: "etc/karaf/org.apache.karaf.service.acl.command.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.apache.karaf.service.acl.command.cfg" }
    - { src: "etc/karaf/org.apache.karaf.shell.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.apache.karaf.shell.cfg" }
    - { src: "etc/karaf/org.ops4j.pax.logging.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.ops4j.pax.logging.cfg" }
    - { src: "etc/karaf/org.ops4j.pax.url.mvn.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/org.ops4j.pax.url.mvn.cfg" }
    - { src: "etc/karaf/profile.cfg.j2", dest: "{{ _nexus_installdir }}/etc/karaf/profile.cfg" }
    - { src: "etc/karaf/scripts/shell.completion.script.j2", dest: "{{ _nexus_installdir }}/etc/karaf/scripts/shell.completion.script" }
    - { src: "etc/karaf/shell.init.script.j2", dest: "{{ _nexus_installdir }}/etc/karaf/shell.init.script" }
    - { src: "etc/karaf/startup.properties.j2", dest: "{{ _nexus_installdir }}/etc/karaf/startup.properties" }
    - { src: "etc/karaf/system.properties.j2", dest: "{{ _nexus_installdir }}/etc/karaf/system.properties" }
  changed_when: false
  failed_when: false
  check_mode: false

# Initialize nexus service for service manager is of systemd
- name: "({{ ansible_distribution }}) NX::CONFIG - Initialize nexus service for service manager is of systemd"
  block:

    # Generate Configurations from templates
    - name: "({{ ansible_distribution }}) NX::CONFIG - Generate Configurations from templates (systemctl)"
      template:
        src: "systemd/nexus.service.j2"
        dest: "{{ _nexus_service_dir }}/nexus.service"
        owner: "root"
        group: "root"
        mode: "u+rw-x,g+r-wx,o+r-wx"
        backup: true
      notify: systemctl daemon-reload
      tags:
        - nexus
        - molecule-idempotence-notest

    # Enable and Start nexus service (generate default admin password file on first start)
    - name: "({{ ansible_distribution }}) NX::CONFIG - Enable and Start nexus service (systemd)"
      systemd:
        name: "nexus.service"
        state: started
        enabled: true
        no_block: true
      changed_when: false
      failed_when: false
      check_mode: false

  when: "ansible_service_mgr == 'systemd'"

# Initialize nexus service for service manager is of systemd
- name: "({{ ansible_distribution }}) NX::CONFIG - Initialize nexus service for service manager is of systemd"
  block:

    # Create symlink for init.d nexus service
    - name: "({{ ansible_distribution }}) NX::CONFIG - Create symlink for init.d nexus service (init.d)"
      file:
        src: "{{ _nexus_installdir }}/bin/nexus"
        dest: "/etc/init.d/nexus"
        owner: "{{ nexus_owner }}"
        group: "{{ nexus_group }}"
        state: link

    # Enable and Start nexus service (generate default admin password file on first start)
    - name: "({{ ansible_distribution }}) NX::CONFIG - Enable and Start nexus service (service)"
      service:
        name: "nexus"
        state: started
        enabled: true
      tags:
        - nexus
        - molecule-idempotence-notest

  when: "ansible_service_mgr != 'systemd'"

# Retrieve initial admin password
- name: "({{ ansible_distribution }}) NX::CONFIG - Retrieve initial admin password"
  block:

    # Wait for nexus administrator password file available
    - name: "({{ ansible_distribution }}) NX::CONFIG - Wait for nexus administrator password file available"
      wait_for:
        path: "{{ _nexus_default_password_file }}"
        sleep: 3
        state: present

    # Read base64 encoded password from file
    - name: "({{ ansible_distribution }}) NX::CONFIG::BLOCK - Slurp content of remote generated password file"
      slurp:
        src: "{{ _nexus_default_password_file }}"
      register: slurped_content

    # Decode encoded password
    - name: "({{ ansible_distribution }}) NX::CONFIG::BLOCK - Decode encoded password"
      set_fact:
        current_admin_password: "{{ slurped_content.content | b64decode }}"

    # Ensure the default admin password is defined
    - name: "({{ ansible_distribution }}) NX::CONFIG - Ensure the default admin password is defined"
      fail:
        msg: >-
          Failed to extract the initial administrator password.
          Ensure that the file "{{ _nexus_default_password_file }}" exists.
      when: current_admin_password is not defined

  when:
    - current_admin_password is not defined

# Wait for nexus iap availaible
- name: "({{ ansible_distribution }}) NX::CONFIG - Wait for nexus API availaible"
  uri:
    url: "{{ _nexus_internal_scheme }}://{{ _nexus_internal_host }}:{{ _nexus_internal_port }}\
      {{ _nexus_internal_context }}{{ _nexus_api_script_uri }}"
    user: "{{ _nexus_default_user }}"
    password: "{{ current_admin_password }}"
    method: "HEAD"
    force_basic_auth: true
    status_code: 200,202,203,204,404
    validate_certs: "{{ nexus_api_validate_certs }}"
  register: apiresponse
  until: apiresponse.status in [200, 202, 203, 204, 404]
  delay: 5
  retries: 50
  tags:
    - molecule-idempotence-notest

# Register scripts on nexus instance
- name: "({{ ansible_distribution }}) NX::CONFIG - Register script in nexus instance"
  include_tasks: zz-register-script.yml
  loop:
    - "configure_email"
    - "configure_proxy"
    - "configure_admin_password"
    - "delete_repository"
    - "create_repository"
    - "delete_store"
    - "create_store"
    - "create_role"
    - "create_user"
  tags:
    - molecule-idempotence-notest

# Initialize Email Server Configuration
- name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Email Server Configuration"
  include_tasks: zz-execute-script.yml
  vars:
    script_name: configure_email
    arguments:
      enabled: "{{ nexus_email_server_enabled }}"
      host: "{{ nexus_email_server_host }}"
      port: "{{ nexus_email_server_port }}"
      username: "{{ nexus_email_server_username }}"
      password: "{{ nexus_email_server_password }}"
      fromAdress: "{{ nexus_email_from_address }}"
      subjectPrefix: "{{ nexus_email_subject_prefix }}"
      startTlsEnabled: "{{ nexus_email_tls_enabled }}"
      startTlsRequired: "{{ nexus_email_tls_required }}"
      sslOnConnectEnabled: "{{ nexus_email_ssl_on_connect_enabled }}"
      sslCheckServerIdentityEnabled: "{{ nexus_email_ssl_check_server_identity_enabled }}"
      nexusTrustStoreEnabled: "{{ nexus_email_trust_store_enabled }}"
  when:
    - nexus_email_server_enabled|bool
  tags:
    - molecule-idempotence-notest

# Initialize Proxy Server Configuration
- name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Proxy Server Configuration"
  include_tasks: zz-execute-script.yml
  vars:
    script_name: configure_proxy
    arguments:
      httpProxyEnabled: "{{ nexus_http_proxy_enabled }}"
      httpProxyHost: "{{ nexus_http_proxy_host }}"
      httpProxyPort: "{{ nexus_http_proxy_port }}"
      httpProxyUsername: "{{ nexus_http_proxy_username }}"
      httpProxyPassword: "{{ nexus_http_proxy_password }}"
      httpsProxyEnabled: "{{ nexus_https_proxy_enabled }}"
      httpsProxyHost: "{{ nexus_https_proxy_host }}"
      httpsProxyPort: "{{ nexus_https_proxy_port }}"
      httpsProxyUsername: "{{ nexus_https_proxy_username }}"
      httpsProxyPassword: "{{ nexus_https_proxy_password }}"
      nonProxyHosts: "{{ nexus_non_proxy_hosts }}"
  when: nexus_http_proxy_enabled or nexus_https_proxy_enabled
  tags:
    - molecule-idempotence-notest

# Clean existing Blobstores before create
- name: "({{ ansible_distribution }}) NX::CONFIG - Clean existing Blobstores ('{{ item.name }}' if needed)."
  include_tasks: zz-execute-script.yml
  vars:
    script_name: delete_store
    arguments:
      name: "{{ item.name }}"
  loop: "{{ nexus_blobstores }}"
  when:
    - nexus_blobstores_clean | bool
    - nexus_blobstores | length > 0
  tags:
    - molecule-idempotence-notest

# Blobstore block
- name: "({{ ansible_distribution }}) NX::CONFIG - Initialize BlobStore"
  block:

    # Create directories for file blob stores
    - name: "({{ ansible_distribution }}) NX::CONFIG - Create directories for file blob stores ('{{ item.name }}' if needed)."
      file:
        path: "{{ _nexus_datadir }}/{{ item.path | regex_replace('^\\/', '') }}"
        owner: "{{ nexus_owner }}"
        group: "{{ nexus_group }}"
        state: directory
        recurse: true
      loop: "{{ nexus_blobstores }}"
      when:
        - item.type == 'file'
        - item.path is defined
        - item.path | length > 0

    # Initialize File BlobStores
    - name: "({{ ansible_distribution }}) NX::CONFIG - Initialize File BlobStores"
      include_tasks: zz-execute-script.yml
      vars:
        script_name: create_store
        arguments:
          name: "{{ item.name }}"
          type: "{{ item.type }}"
          path: "{{ _nexus_datadir }}/{{ item.path | regex_replace('^\\/', '') }}"
      loop: "{{ nexus_blobstores }}"
      when:
        - item.type | upper == 'FILE'
        - item.path is defined
        - item.path | length > 0
      tags:
        - molecule-idempotence-notest

    # Initialize S3 BlobStores
    - name: "({{ ansible_distribution }}) NX::CONFIG - Initialize S3 BlobStores"
      include_tasks: zz-execute-script.yml
      vars:
        script_name: create_store
        arguments:
          name: "{{ item.name }}"
          type: "{{ item.type }}"
          config: "{{ item.config }}"
      loop: "{{ nexus_blobstores }}"
      when:
        - item.type | upper == 'S3'
        - item.path is defined
        - item.path | length > 0
      tags:
        - molecule-idempotence-notest

  when: nexus_blobstores | length > 0

# Repository block
- name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Repositories"
  block:

    # Initialize Docker Hosted Repositories
    - name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Docker Hosted Repository"
      include_tasks: zz-execute-script.yml
      vars:
        script_name: create_repository
        arguments:
          name: "{{ item.name }}"
          format: "{{ item.format }}"
          type: "{{ item.type }}"
          online: "{{ item.online | default(true) }}"
          store: "{{ item.store | default('default') }}"
          strictContentValidation: "{{ item.strictContentValidation | default(false) }}"
          members: "{{ item.members | default([]) }}"
          writePolicy: "{{ item.writePolicy | default('ALLOW') }}"
          cleanupPolicies: "{{ item.cleanupPolicies | default([]) }}"
          dockerForceBasicAuth: "{{ item.dockerForceBasicAuth | default(false) }}"
          dockerV1Enabled: "{{ item.dockerV1Enabled | default(true) }}"
          dockerHttpPort: "{{ item.dockerHttpPort | default(1) }}"

      loop: "{{ nexus_repositories }}"
      when:
        - item.name is defined
        - item.name | length > 0
        - item.type is defined
        - item.type == "hosted"
        - item.format is defined
        - item.format == "docker"
      tags:
        - molecule-idempotence-notest

    # Initialize Docker Proxy Repositories
    - name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Docker Proxy Repository"
      include_tasks: zz-execute-script.yml
      vars:
        script_name: create_repository
        arguments:
          name: "{{ item.name }}"
          format: "{{ item.format }}"
          type: "{{ item.type }}"
          online: "{{ item.online | default(true) }}"
          store: "{{ item.store | default('default') }}"
          strictContentValidation: "{{ item.strictContentValidation | default(false) }}"
          writePolicy: "{{ item.writePolicy | default('ALLOW') }}"
          proxyUsername: "{{ item.proxyUsername | default('') }}"
          proxyPassword: "{{ item.proxyPassword | default('') }}"
          proxyRemoteUrl: "{{ item.proxyRemoteUrl | default('') }}"
          proxyContentMaxAge: "{{ item.proxyContentMaxAge | default(1440) }}"
          proxyMetadataMaxAge: "{{ item.proxyMetadataMaxAge | default(1440) }}"
          negativeCacheEnabled: "{{ item.negativeCacheEnabled | default(true) }}"
          negativeCachetimeToLive: "{{ item.negativeCachetimeToLive | default(1440) }}"
          cleanupPolicies: "{{ item.cleanupPolicies | default([]) }}"
          dockerProxyIndexType: "{{ item.dockerProxyIndexType | default('REGISTRY') }}"
          dockerProxyUseTrustStoreForIndexAccess: "{{ item.dockerProxyUseTrustStoreForIndexAccess | default(false) }}"
          dockerProxyForeignLayerUrlWhitelist: "{{ item.dockerProxyForeignLayerUrlWhitelist | default(['.*']) }}"
          dockerProxyCacheForeignLayers: "{{ item.dockerProxyCacheForeignLayers | default(true) }}"

      loop: "{{ nexus_repositories }}"
      when:
        - item.name is defined
        - item.name | length > 0
        - item.type is defined
        - item.type == "proxy"
        - item.format is defined
        - item.format == "docker"
      tags:
        - molecule-idempotence-notest

    # Initialize Maven Hosted Repositories
    - name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Maven Hosted Repository"
      include_tasks: zz-execute-script.yml
      vars:
        script_name: create_repository
        arguments:
          name: "{{ item.name }}"
          format: "{{ item.format }}"
          type: "{{ item.type }}"
          online: "{{ item.online | default(true) }}"
          store: "{{ item.store | default('default') }}"
          strictContentValidation: "{{ item.strictContentValidation | default(false) }}"
          writePolicy: "{{ item.writePolicy | default('ALLOW') }}"
          cleanupPolicies: "{{ item.cleanupPolicies | default([]) }}"
          mavenVersionPolicy: "{{ item.mavenVersionPolicy | default('SNAPSHOT') }}"
          mavenLayoutPolicy: "{{ item.mavenLayoutPolicy | default('STRICT') }}"

      loop: "{{ nexus_repositories }}"
      when:
        - item.name is defined
        - item.name | length > 0
        - item.type is defined
        - item.type == "hosted"
        - item.format is defined
        - item.format == "maven2"
      tags:
        - molecule-idempotence-notest

    # Initialize Maven Proxy Repositories
    - name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Maven Proxy Repository"
      include_tasks: zz-execute-script.yml
      vars:
        script_name: create_repository
        arguments:
          name: "{{ item.name }}"
          format: "{{ item.format }}"
          type: "{{ item.type }}"
          online: "{{ item.online | default(true) }}"
          store: "{{ item.store | default('default') }}"
          strictContentValidation: "{{ item.strictContentValidation | default(false) }}"
          writePolicy: "{{ item.writePolicy | default('ALLOW') }}"
          proxyUsername: "{{ item.proxyUsername | default('') }}"
          proxyPassword: "{{ item.proxyPassword | default('') }}"
          proxyRemoteUrl: "{{ item.proxyRemoteUrl | default('') }}"
          proxyContentMaxAge: "{{ item.proxyContentMaxAge | default(1440) }}"
          proxyMetadataMaxAge: "{{ item.proxyMetadataMaxAge | default(1440) }}"
          negativeCacheEnabled: "{{ item.negativeCacheEnabled | default(true) }}"
          negativeCachetimeToLive: "{{ item.negativeCachetimeToLive | default(1440) }}"
          cleanupPolicies: "{{ item.cleanupPolicies | default([]) }}"
          mavenVersionPolicy: "{{ item.mavenVersionPolicy | default('SNAPSHOT') }}"
          mavenLayoutPolicy: "{{ item.mavenLayoutPolicy | default('STRICT') }}"

      loop: "{{ nexus_repositories }}"
      when:
        - item.name is defined
        - item.name | length > 0
        - item.type is defined
        - item.type == "proxy"
        - item.format is defined
        - item.format == "maven2"
      tags:
        - molecule-idempotence-notest

    # Initialize Other Repositories
    - name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Repository"
      include_tasks: zz-execute-script.yml
      vars:
        script_name: create_repository
        arguments:
          name: "{{ item.name }}"
          format: "{{ item.format }}"
          type: "{{ item.type }}"
          online: "{{ item.online | default(true) }}"
          store: "{{ item.store | default('default') }}"
          strictContentValidation: "{{ item.strictContentValidation | default(false) }}"
          members: "{{ item.members | default([]) }}"
          writePolicy: "{{ item.writePolicy | default('ALLOW') }}"
          repoDataDepth: "{{ item.repoDataDepth | default(0) }}"
          layoutPolicy: "{{ item.layoutPolicy | default('') }}"
          distribution: "{{ item.distribution | default('') }}"
          keypair: "{{ item.keypair | default('') }}"
          passphrase: "{{ item.passphrase | default('') }}"
          proxyUsername: "{{ item.proxyUsername | default('') }}"
          proxyPassword: "{{ item.proxyPassword | default('') }}"
          proxyRemoteUrl: "{{ item.proxyRemoteUrl | default('') }}"
          proxyContentMaxAge: "{{ item.proxyContentMaxAge | default(1440) }}"
          proxyMetadataMaxAge: "{{ item.proxyMetadataMaxAge | default(1440) }}"
          negativeCacheEnabled: "{{ item.negativeCacheEnabled | default(true) }}"
          negativeCachetimeToLive: "{{ item.negativeCachetimeToLive | default(1440) }}"
          cleanupPolicies: "{{ item.cleanupPolicies | default([]) }}"
          dockerProxyIndexType: "{{ item.dockerProxyIndexType | default('REGISTRY') }}"
          dockerProxyUseTrustStoreForIndexAccess: "{{ item.dockerProxyUseTrustStoreForIndexAccess | default(false) }}"
          dockerProxyForeignLayerUrlWhitelist: "{{ item.dockerProxyForeignLayerUrlWhitelist | default(['.*']) }}"
          dockerProxyCacheForeignLayers: "{{ item.dockerProxyCacheForeignLayers | default(true) }}"
          dockerForceBasicAuth: "{{ item.dockerForceBasicAuth | default(false) }}"
          dockerV1Enabled: "{{ item.dockerV1Enabled | default(true) }}"
          dockerHttpPort: "{{ item.dockerHttpPort | default(1) }}"
          mavenVersionPolicy: "{{ item.mavenVersionPolicy | default('SNAPSHOT') }}"
          mavenLayoutPolicy: "{{ item.mavenLayoutPolicy | default('STRICT') }}"

      loop: "{{ nexus_repositories }}"
      when:
        - item.name is defined
        - item.name | length > 0
        - item.type is defined
        - item.format is defined
        - item.format not in ["maven2", "docker"]
      tags:
        - molecule-idempotence-notest

  when: nexus_repositories | length > 0

# Roles block
- name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Roles"
  block:

    # Initialize Roles
    - name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Roles"
      include_tasks: zz-execute-script.yml
      vars:
        script_name: create_role
        arguments:
          id: "{{ item.id }}"
          name: "{{ item.name }}"
          description: "{{ item.description | default('') }}"
          privileges: "{{ item.privileges | default([]) }}"
          roles: "{{ item.roles | default([]) }}"

      loop: "{{ nexus_roles }}"
      when:
        - item.id is defined and item.id | length > 0
        - item.name is defined and item.name | length > 0
      tags:
        - molecule-idempotence-notest

  when: nexus_roles | length > 0

# Users block
- name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Users"
  block:

    # Initialize Users
    - name: "({{ ansible_distribution }}) NX::CONFIG - Initialize Users"
      include_tasks: zz-execute-script.yml
      vars:
        script_name: create_user
        arguments:
          id: "{{ item.id }}"
          lastName: "{{ item.lastName }}"
          firstName: "{{ item.firstName | default('No First name') }}"
          email: "{{ item.email | default('noeail@localhost') }}"
          password: "{{ item.password | default('ch@ngeme') }}"
          enabled: "{{ item.enabled | default(true) }}"
          roles: "{{ item.roles | default([]) }}"

      loop: "{{ nexus_users }}"
      when:
        - item.id is defined and item.id | length > 0
        - item.lastName is defined and item.lastName | length > 0
      tags:
        - molecule-idempotence-notest

  when: nexus_users | length > 0

# Initialize New Administrator password
- name: "({{ ansible_distribution }}) NX::CONFIG - Initialize New Administrator password"
  include_tasks: zz-execute-script.yml
  vars:
    script_name: configure_admin_password
    arguments:
      adminUserName: "{{ nexus_adminitrator_user }}"
      newAdminPassword: "{{ nexus_administrator_password }}"
  tags:
    - molecule-idempotence-notest

# Initialize current password
- name: "({{ ansible_distribution }}) NX::CONFIG::BLOCK - Decode encoded password"
  set_fact:
    current_admin_password: "{{ nexus_administrator_password }}"
  when: current_admin_password != nexus_administrator_password
